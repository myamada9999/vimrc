
●vimでいろいろプラグイン入れてみた．

参考：

 http://tech.kayac.com/archive/vim-plugin-coding.html


●vim-pathogen

.vimディレクトリの下に置くプラグインを，プラグインごとにディレクトリ単位で行うことができる．

 https://github.com/tpope/vim-pathogen

上のサイトでvim-pathogen.gitをダウンロード．

.vim/の下にautoload/pathogen.vimを丸ごとコピー．

今後プラグインは以下のディレクトリの下に置くだけでよい．

 mkdir ~/.vim/bundle

.vimrcに以下の記述を追加

 call pathogen#runtime_append_all_bundles()
 call pathogen#helptags()


●vim-ref

 http://github.com/thinca/vim-ref

 $ git clone https://github.com/thinca/vim-ref.git

refコマンドでmanなどを呼び出してドキュメント参照ができる．

 :ref source word


●unite.vim

 http://github.com/Shougo/unite.vim

エクスプローラのようにファイル一覧を取得したりできる．

 $ git clone https://github.com/Shougo/unite.vim.git


・現在のディレクトリ内のファイル一覧の取得

 :Unite file -buffer-name=files


・現在開いているファイルの所属しているディレクトリのファイル一覧の取得

 :UniteWithBufferDir file -buffer-name=files


・最近開いたファイルを見る

 :Unite file_mru
 :UniteWithCurrentDir file_mru


●neocomplcache.vim

コーディングの補完に使う．

 http://github.com/Shougo/neocomplcache

 $ git clone https://github.com/Shougo/neocomplcache.git


.vimrcに設定を記述．

 " 
 " neocomplcache.vim
 " 
 let g:acp_enableAtStartup = 0
 " Use neocomplcache.
 let g:neocomplcache_enable_at_startup = 1
 " Use smartcase.
 let g:neocomplcache_enable_smart_case = 1
 " Use camel case completion.
 let g:neocomplcache_enable_camel_case_completion = 1
 " Use underbar completion.
 let g:neocomplcache_enable_underbar_completion = 1
 " Set minimum syntax keyword length.
 let g:neocomplcache_min_syntax_length = 3
 let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'  
 
 " Define dictionary
 let g:neocomplcache_dictionary_filetype_lists = {
     \ 'default' : '',
     \ 'vimshell' : $HOM E.'/.vimshell_hist',
     \ 'scheme' : $HOME.'/.gosh_completions'
     \ }
 
 " Define keyword.
 if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
 endif
 let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
 
 " Plugin key-mappings.
 imap <C-k>     <Plug>(neocomplcache_snippets_expand)
 smap <C-k>     <Plug>(neocomplcache_snippets_expand)
 inoremap <expr><C-g>     neocomplcache#undo_completion()
 inoremap <expr><C-l>     neocomplcache#complete_common_string() 
 
 " SuperTab like snippets behavior.
 "imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ?  "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>" 
 
 " Recommended key-mappings.
 " <CR>: close popup and save indent.
 inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
 " <TAB>: completion.
 inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
 " <C-h>, <BS>: close popup and delete backword char.
 inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
 inoremap <expr><BS>  neocomplcache#smart_close_popup()."\<C-h>"
 inoremap <expr><C-y>  neocomplcache#close_popup()
 inoremap <expr><C-e>  neocomplcache#cancel_popup() 
 
 " AutoComplPop like behavior.
 let g:neocomplcache_enable_auto_select = 1 
 
 " Shell like behavior(not recommended).
 "set completeopt+=longest
 "let g:neocomplcache_enable_auto_select = 1
 "let g:neocomplcache_disable_auto_complete = 1
 "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<TAB>"
 "inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>" 
 
 " <TAB> completion.
 inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
 " C-jでオムニ補完
 inoremap <expr> <C-j> &filetype == 'vim' ? "\<C-x>\<C-v>\<C-p>" : "\<C-x>\<C-o>\<C-p>" 
 " C-kを押すと行末まで削除
 inoremap <C-k> <C-o>D
 " C-nでneocomplcache補完
 inoremap <expr><C-n>  pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>"
 " C-pでkeyword補完
 inoremap <expr><C-p> pumvisible() ? "\<C-p>" : "\<C-p>\<C-n>"
 " 補完候補が表示されている場合は確定。そうでない場合は改行
 inoremap <expr><CR>  pumvisible() ? neocomplcache#close_popup() : "<CR>"
 " 補完をキャンセル
 inoremap <expr><C-e>  neocomplcache#close_popup()
 
 " Enable omni completion.
 autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
 autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
 autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
 autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
 autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
 
 " Enable heavy omni completion.
 if !exists('g:neocomplcache_omni_patterns')
   let g:neocomplcache_omni_patterns = {}
 endif
 let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
 "autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
 let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
 let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
 let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::' 
 


●コメントアウト

参考：

 http://nanasi.jp/articles/vim/commentout_source.html

一括でコメントアウトするスクリプト．
commentout.vimというファイル名で，.vim/plugin/の下におく．

 " commentout.vim
 " lhs comments
 vmap ,# :s/^/#/<CR>:nohlsearch<CR>
 vmap ,/ :s/^/\/\//<CR>:nohlsearch<CR>
 vmap ,> :s/^/> /<CR>:nohlsearch<CR>
 vmap ," :s/^/\"/<CR>:nohlsearch<CR>
 vmap ,% :s/^/%/<CR>:nohlsearch<CR>
 vmap ,! :s/^/!/<CR>:nohlsearch<CR>
 vmap ,; :s/^/;/<CR>:nohlsearch<CR>
 vmap ,- :s/^/--/<CR>:nohlsearch<CR>
 vmap ,c :s/^\/\/\\|^--\\|^> \\|^[#"%!;]//<CR>:nohlsearch<CR>
 " wrapping comments
 vmap ,* :s/^\(.*\)$/\/\* \1 \*\//<CR>:nohlsearch<CR>
 vmap ,( :s/^\(.*\)$/\(\* \1 \*\)/<CR>:nohlsearch<CR>
 vmap ,< :s/^\(.*\)$/<!-- \1 -->/<CR>:nohlsearch<CR>
 vmap ,d :s/^\([/(]\*\\|<!--\) \(.*\) \(\*[/)]\\|-->\)$/\2/<CR>:nohlsearch<CR>
 " block comments
 vmap ,b v`<I<CR><esc>k0i/*<ESC>`>j0i*/<CR><esc><ESC>
 vmap ,h v`<I<CR><esc>k0i<!--<ESC>`>j0i--><CR><esc><ESC> 


・コメントアウト

visula modeで複数行選択したのち，

 ,/

か

 ,b

を入力するとコメントアウトになる．


・コメント削除

 ,c

か

 ,d

